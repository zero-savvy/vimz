use ark_bn254::{Bn254, G1Projective as G1};
use ark_groth16::Groth16;
use ark_grumpkin::Projective as G2;
use sonobe::{
    Decider as DeciderTrait,
    commitment::{kzg::KZG, pedersen::Pedersen},
    folding::{nova::decider_eth::Decider as DeciderEth, traits::CommittedInstanceOps},
};

use crate::sonobe_backend::{circuits::SonobeCircuit, folding::Folding};

/// Compressed proof producer.
pub type Decider<Circuit> = DeciderEth<
    G1,
    G2,
    Circuit,
    KZG<'static, Bn254>,
    Pedersen<G2>,
    Groth16<Bn254>,
    Folding<Circuit>,
>;

pub type DeciderVerifierParam<Circuit> =
    <Decider<Circuit> as DeciderTrait<G1, G2, Circuit, Folding<Circuit>>>::VerifierParam;
pub type DeciderProof<Circuit> =
    <Decider<Circuit> as DeciderTrait<G1, G2, Circuit, Folding<Circuit>>>::Proof;

/// Verify the final proof generated by the folding scheme and the decider wrapper.
pub fn verify_final_proof<Circuit: SonobeCircuit>(
    proof: &DeciderProof<Circuit>,
    folding: &Folding<Circuit>,
    decider_vp: DeciderVerifierParam<Circuit>,
) {
    assert!(
        Decider::<Circuit>::verify(
            decider_vp,
            folding.i,
            folding.z_0.clone(),
            folding.z_i.clone(),
            &folding.U_i.get_commitments(),
            &folding.u_i.get_commitments(),
            proof,
        )
        .expect("Failed to verify proof")
    )
}
